{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pickle\n",
    "\n",
    "df = pd.read_csv('train.csv')\n",
    "df.loc[df['Fare']>400, 'Fare'] = df['Fare'].median()\n",
    "\n",
    "df['Age'].fillna(df['Age'].median(), inplace=True)\n",
    "\n",
    "df['Embarked'].fillna(\"S\", inplace=True)\n",
    "\n",
    "del df['Cabin']\n",
    "del df['Ticket']\n",
    "\n",
    "def get_title(name):\n",
    "    if \".\" in name:\n",
    "        return name.split(\",\")[1].split('.')[0].strip()\n",
    "    else:\n",
    "        return 'No title in name'\n",
    "\n",
    "def shorter_titles(x):\n",
    "    title = x['Title']\n",
    "    if title in ['Capt', 'Col', 'Major']:\n",
    "        return 'Officer'\n",
    "    elif title in ['Jonkheer', 'Lady', 'Don', 'Sir', 'the Countess', 'Dona']:\n",
    "        return 'Royalty'\n",
    "    elif title == 'Mme':\n",
    "        return 'Mrs'\n",
    "    elif title in ['Mlle', 'Ms']:\n",
    "        return 'Miss'\n",
    "    else:\n",
    "        return title    \n",
    "\n",
    "titles = set([x for x in df.Name.map(lambda x: get_title(x))])\n",
    "df['Title'] = df['Name'].map(lambda x: get_title(x))\n",
    "df['Title'] = df.apply(shorter_titles, axis=1)\n",
    "df.drop('Name', axis=1, inplace=True)\n",
    "\n",
    "df.Sex.replace(('male', 'female'), (0, 1), inplace=True)\n",
    "df.Embarked.replace(('S', 'C', 'Q'), (0, 1, 2), inplace=True)\n",
    "df.Title.replace(('Mr', 'Miss', 'Mrs', 'Master', 'Dr', 'Rev', 'Royalty', 'Officer'), (0, 1, 2, 3, 4, 5, 6, 7), inplace=True)\n",
    "\n",
    "corr = df.corr()\n",
    "corr.Survived.sort_values(ascending=False)\n",
    "\n",
    "y = df['Survived']\n",
    "x = df.drop(['Survived', 'PassengerId'], axis=1)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1)\n",
    "\n",
    "random_forest = RandomForestClassifier()\n",
    "random_forest.fit(x_train, y_train)\n",
    "y_pred = random_forest.predict(x_test)\n",
    "acc_random_forest = round(accuracy_score(y_pred, y_test) * 100, 2)\n",
    "pickle.dump(random_forest, open('titanic_model.sav', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prediction_model(pClass, sex, age, sibsp, parch, fare, embarked, title):\n",
    "    import pickle\n",
    "    x = [[pClass, sex, age, sibsp, parch, fare, embarked, title]]\n",
    "    randomForest = pickle.load(open('Titanic_model.sav', 'rb'))\n",
    "    predictions = randomForest.predict(x)\n",
    "    print(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
